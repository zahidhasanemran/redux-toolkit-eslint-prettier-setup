/* ==================================================================================================================================
  1. Create asyncThunks for data fetching
  2. extraReducers: handle 3 promise lifecycle (pending, fulfilled, rejected) generated by createAsyncThunk 
  3. export default cocktailSlice.reducer;
===================================================================================================================================*/

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

export const fetchCoctails = createAsyncThunk(
  "coctails/fetchCocktail",
  async () => {
    return fetch(
      "https://www.thecocktaildb.com/api/json/v1/1/search.php?s="
    ).then((res) => res.json());
  }
);

export const fetchSingleCoctail = createAsyncThunk(
  "coctails/fetchSingleCoctail",
  async ({ id }) => {
    return fetch(
      `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`
    ).then((res) => res.json());
  }
);

export const fetchSerachCoctail = createAsyncThunk(
  "coctails/fetchSearchCoctail",
  async ({ text }) => {
    return fetch(
      `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${text}`
    ).then((res) => res.json());
  }
);

const cocktailSlice = createSlice({
  name: "coctails",
  initialState: {
    coctails: [],
    coctail: [],
    loading: false,
    error: null,
  },
  extraReducers: {
    [fetchCoctails.pending]: (state, action) => {
      state.loading = true;
    },
    [fetchCoctails.fulfilled]: (state, action) => {
      state.coctails = action.payload.drinks;
      state.loading = false;
    },
    [fetchCoctails.pending]: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    [fetchSingleCoctail.pending]: (state, action) => {
      state.loading = true;
    },
    [fetchSingleCoctail.fulfilled]: (state, action) => {
      state.loading = false;
      state.coctail = action.payload.drinks;
    },
    [fetchSingleCoctail.rejected]: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    [fetchSerachCoctail.pending]: (state, action) => {
      state.loading = true;
    },
    [fetchSerachCoctail.fulfilled]: (state, action) => {
      state.loading = false;
      state.coctails = action.payload.drinks;
    },
    [fetchSerachCoctail.rejected]: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
});

export default cocktailSlice.reducer;

// import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// export const fetchCocktails = createAsyncThunk(
//   "cocktails/fetchCocktails",
//   async () => {
//     return fetch(
//       "https://www.thecocktaildb.com/api/json/v1/1/search.php?s="
//     ).then((res) => res.json());
//   }
// );

// export const fetchSingleCocktail = createAsyncThunk(
//   "cocktails/fetchSingleCocktail",
//   async ({ id }) => {
//     return fetch(
//       `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`
//     ).then((res) => res.json());
//   }
// );

// export const fetchSearchCocktail = createAsyncThunk(
//   "cocktails/fetchSearchCocktail",
//   async ({ searchText }) => {
//     return fetch(
//       `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${searchText}`
//     ).then((res) => res.json());
//   }
// );

// const cocktailSlice = createSlice({
//   name: "cocktails",
//   initialState: {
//     cocktails: [],
//     cocktail: [],
//     loading: false,
//     error: null,
//   },
//   extraReducers: {
//     [fetchCocktails.pending]: (state, action) => {
//       state.loading = true;
//     },
//     [fetchCocktails.fulfilled]: (state, action) => {
//       state.loading = false;
//       state.cocktails = action.payload.drinks;
//     },
//     [fetchCocktails.rejected]: (state, action) => {
//       state.loading = false;
//       state.error = action.payload;
//     },
//     [fetchSingleCocktail.pending]: (state, action) => {
//       state.loading = true;
//     },
//     [fetchSingleCocktail.fulfilled]: (state, action) => {
//       state.loading = false;
//       state.cocktail = action.payload.drinks;
//     },
//     [fetchSingleCocktail.rejected]: (state, action) => {
//       state.loading = false;
//       state.error = action.payload;
//     },
//     [fetchSearchCocktail.pending]: (state, action) => {
//       state.loading = true;
//     },
//     [fetchSearchCocktail.fulfilled]: (state, action) => {
//       state.loading = false;
//       state.cocktails = action.payload.drinks;
//     },
//     [fetchSearchCocktail.rejected]: (state, action) => {
//       state.loading = false;
//       state.error = action.payload;
//     },
//   },
// });

// export default cocktailSlice.reducer;
